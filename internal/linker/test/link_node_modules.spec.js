const linker = require('../link_node_modules');
const fs = require('fs');
const path = require('path');
const tmp = require('tmp');

const DEBUG = !!process.env['DEBUG'];

function log_verbose(...m) {
  if (!!process.env['VERBOSE_LOGS']) console.error('[link_node_modules.spec.js]', ...m);
}

function mkdirp(p) {
  if (!fs.existsSync(p)) {
    mkdirp(path.dirname(p));
    fs.mkdirSync(p);
  }
}

describe('link_node_modules', () => {
  it('should report when modules manifest absent', () => {
    try {
      linker.main();
    } catch (expected) {
      expect(expected.message).toContain('requires one argument');
    }
    try {
      linker.main([]);
    } catch (expected) {
      expect(expected.message).toContain('requires one argument');
    }
    try {
      linker.main(['bad_path']);
    } catch (expected) {
      expect(expected.message).toContain('ENOENT');
    }
  });
  it('should handle first-party packages only', () => {
    const tmpDir = tmp.dirSync({keep: DEBUG, unsafeCleanup: !DEBUG}).name;
    log_verbose(`using tmp directory ${tmpDir}${DEBUG ? ' (keeping with DEBUG set)' : ''}`);

    process.chdir(tmpDir);

    // Create a package in a different workspace
    mkdirp('other_wksp/path/to/lib_a');
    fs.writeFileSync('other_wksp/path/to/lib_a/index.js', 'exports = {}', {encoding: 'utf-8'});
    // Create our local workspace where the build is running
    mkdirp('wksp_1');
    // Set the cwd() like Bazel would in the execroot
    process.chdir('wksp_1');

    // Mock out the creation of the modules manifest
    fs.writeFileSync(
        'manifest.json',
        JSON.stringify(
            {
              'modules': {'a': 'other_wksp/path/to/lib_a'},
            },
            null, 2),
        {encoding: 'utf-8'});

    linker.main(['manifest.json']);

    // The linker expects to run as its own process, so it changes the wd
    process.chdir(tmpDir);
    expect(fs.readdirSync('wksp_1')).toContain('node_modules');
    expect(fs.readdirSync('wksp_1/node_modules')).toContain('a');
    expect(fs.readdirSync('wksp_1/node_modules/a')).toContain('index.js');
  });
});